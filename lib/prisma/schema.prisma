// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum BookStatus {
  AVAILABLE
  BORROWED
}

enum TransactionStatus {
  ACTIVE
  RETURNED
}

enum PenaltyStatus {
  ACTIVE
  PAID
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members      Member[]
  transactions BorrowTransaction[]
  penalties    Penalty[]
}

model Book {
  id        String     @id @default(cuid())
  title     String
  author    String
  status    BookStatus @default(AVAILABLE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  transactions BorrowTransaction[]

  @@index([status])
}

model Member {
  id        String   @id @default(cuid())
  user_id   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])
}

model BorrowTransaction {
  id        String            @id @default(cuid())
  user_id   String
  book_id   String
  status    TransactionStatus @default(ACTIVE)
  returnAt  DateTime
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  user User @relation(fields: [user_id], references: [id])
  book Book @relation(fields: [book_id], references: [id])

  @@index([status])
}

model Penalty {
  id        String        @id @default(cuid())
  user_id   String
  amount    Float
  status    PenaltyStatus @default(ACTIVE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user User @relation(fields: [user_id], references: [id])

  @@index([status])
}

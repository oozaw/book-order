// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum BookStatus {
  AVAILABLE
  BORROWED
}

enum TransactionStatus {
  ACTIVE
  RETURNED
}

enum PenaltyStatus {
  ACTIVE
  INACTIVE
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  member Member?
}

model Book {
  id        Int        @id @default(autoincrement())
  code      String     @unique
  title     String
  author    String
  status    BookStatus @default(AVAILABLE)
  stock     Int        @default(1)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  transactions BorrowTransaction[]

  @@index([status])
}

model Member {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  user_id   Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  transactions BorrowTransaction[]
}

model BorrowTransaction {
  id          Int               @id @default(autoincrement())
  member_code String
  book_code   String
  status      TransactionStatus @default(ACTIVE)
  returnedAt  DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  member    Member    @relation(fields: [member_code], references: [code], onDelete: Cascade)
  book      Book      @relation(fields: [book_code], references: [code], onDelete: Cascade)
  penalties Penalty[]

  @@index([status])
}

model Penalty {
  id             Int           @id @default(autoincrement())
  transaction_id Int
  status         PenaltyStatus @default(ACTIVE)
  exceedDays     Int
  endDate        DateTime
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  transaction BorrowTransaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade)

  @@index([status])
}
